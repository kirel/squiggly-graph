eval("(function() {\n  var $, d3, flap, flapFn, flapHeight, flapWidth, flaps, fps, height, margin, point, startHeight, step, stepWidth, svg, tail, time, timeLeft, timeRight, wait, width, x, xAxis, xAxisGroup, y, yAxis;\n\n  d3 = require(\'d3\');\n\n  $ = require(\'jquery\');\n\n  flapFn = function(t, h) {\n    return function(x) {\n      return -flapHeight * Math.pow(x - t - flapWidth, 2) / Math.pow(flapWidth, 2) + h + flapHeight;\n    };\n  };\n\n  step = function() {\n    var lastFlap, lastFlapFn, preFlaps, previousFlapsData, succedingFlaps, tailData, tailGen;\n    time += stepWidth;\n    x.domain([time - timeLeft, time + timeRight]);\n    xAxisGroup.call(xAxis.scale(x));\n    lastFlap = flaps[flaps.length - 1];\n    lastFlapFn = flapFn(lastFlap.t, lastFlap.h);\n    if (flaps.length > 1) {\n      succedingFlaps = d3.zip(flaps.slice(0, flaps.length - 1), flaps.slice(1, flaps.length));\n      previousFlapsData = succedingFlaps.map(function(flaps) {\n        var flapLineData;\n        flapLineData = [];\n        flapLineData.push({\n          x: flaps[0].t,\n          y: flaps[0].h\n        });\n        if (flaps[0].t + flapWidth < flaps[1].t) {\n          flapLineData.push({\n            x: flaps[0].t + flapWidth,\n            y: flaps[0].h + flapHeight\n          });\n        }\n        flapLineData.push({\n          x: flaps[1].t,\n          y: flaps[1].h\n        });\n        return flapLineData;\n      });\n      preFlaps = svg.selectAll(\"path.previous-flaps\").data(previousFlapsData);\n      preFlaps.enter().append(\"path\").attr(\"class\", \"previous-flaps\");\n      preFlaps.attr(\"d\", d3.svg.line().interpolate(\"step\").x(function(d) {\n        return x(d.x);\n      }).y(function(d) {\n        return y(d.y);\n      }));\n    }\n    tailData = [lastFlap.t];\n    if (lastFlap.t + flapWidth > time) {\n      tailData.push(time);\n    } else {\n      tailData.push(lastFlap.t + flapWidth);\n      tailData.push(time);\n    }\n    tailGen = d3.svg.line().interpolate(\"step\").x(function(d) {\n      return x(d);\n    }).y(function(d) {\n      return y(lastFlapFn(d));\n    });\n    tail.datum(tailData).attr(\"d\", tailGen);\n    point.datum(time).attr(\"cx\", function(t) {\n      return x(t);\n    }).attr(\"cy\", function(t) {\n      return y(lastFlapFn(t));\n    });\n    setTimeout(step, wait);\n  };\n\n  flap = function() {\n    var currentHeight, lastFlap, lastFlapFn;\n    lastFlap = flaps[flaps.length - 1];\n    lastFlapFn = flapFn(lastFlap.t, lastFlap.h);\n    currentHeight = lastFlapFn(time);\n    flaps.push({\n      t: time,\n      h: currentHeight\n    });\n  };\n\n  margin = {\n    top: 20,\n    right: 20,\n    bottom: 30,\n    left: 40\n  };\n\n  width = 750 - margin.left - margin.right;\n\n  height = 500 - margin.top - margin.bottom;\n\n  svg = d3.select(\"body\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n  time = 0;\n\n  fps = 30;\n\n  wait = 1000 / fps;\n\n  stepWidth = 0.02;\n\n  startHeight = 0.5;\n\n  timeLeft = 0.6;\n\n  timeRight = 0.4;\n\n  x = d3.scale.linear().range([0, width]).domain([time - timeLeft, time + timeRight]);\n\n  y = d3.scale.linear().range([height, 0]).domain([0, 1]);\n\n  xAxis = d3.svg.axis().scale(x).orient(\"bottom\");\n\n  yAxis = d3.svg.axis().scale(y).orient(\"left\");\n\n  xAxisGroup = svg.append(\"g\").attr(\"class\", \"x axis\").attr(\"transform\", \"translate(0,\" + height + \")\").call(xAxis);\n\n  svg.append(\"g\").attr(\"class\", \"y axis\").call(yAxis);\n\n  flapWidth = 0.2;\n\n  flapHeight = 0.2;\n\n  flaps = [\n    {\n      t: 0,\n      h: startHeight\n    }\n  ];\n\n  tail = svg.append(\"path\").attr(\"class\", \"flappy-line\");\n\n  point = svg.append(\"circle\").attr(\"r\", \"10\").attr(\"cx\", function() {\n    return x(time);\n  }).attr(\"cy\", function() {\n    return y(startHeight);\n  });\n\n  $(document).on(\"keydown\", function() {\n    $(document).off(\"keydown\");\n    $(document).on(\"keydown\", flap);\n    step();\n  });\n\n}).call(this);\n//# sourceURL=app.js");
eval("define(\"app\", \n  [],\n  function() {\n    \"use strict\";\n    (function() {\n      var $, d3, flap, flapFn, flapHeight, flapWidth, flaps, fps, height, margin, point, startHeight, step, stepWidth, svg, tail, time, timeLeft, timeRight, wait, width, x, xAxis, xAxisGroup, y, yAxis;\n\n      d3 = require(\'d3\');\n\n      $ = require(\'jquery\');\n\n      flapFn = function(t, h) {\n        return function(x) {\n          return -flapHeight * Math.pow(x - t - flapWidth, 2) / Math.pow(flapWidth, 2) + h + flapHeight;\n        };\n      };\n\n      step = function() {\n        var lastFlap, lastFlapFn, preFlaps, previousFlapsData, succedingFlaps, tailData, tailGen;\n        time += stepWidth;\n        x.domain([time - timeLeft, time + timeRight]);\n        xAxisGroup.call(xAxis.scale(x));\n        lastFlap = flaps[flaps.length - 1];\n        lastFlapFn = flapFn(lastFlap.t, lastFlap.h);\n        if (flaps.length > 1) {\n          succedingFlaps = d3.zip(flaps.slice(0, flaps.length - 1), flaps.slice(1, flaps.length));\n          previousFlapsData = succedingFlaps.map(function(flaps) {\n            var flapLineData;\n            flapLineData = [];\n            flapLineData.push({\n              x: flaps[0].t,\n              y: flaps[0].h\n            });\n            if (flaps[0].t + flapWidth < flaps[1].t) {\n              flapLineData.push({\n                x: flaps[0].t + flapWidth,\n                y: flaps[0].h + flapHeight\n              });\n            }\n            flapLineData.push({\n              x: flaps[1].t,\n              y: flaps[1].h\n            });\n            return flapLineData;\n          });\n          preFlaps = svg.selectAll(\"path.previous-flaps\").data(previousFlapsData);\n          preFlaps.enter().append(\"path\").attr(\"class\", \"previous-flaps\");\n          preFlaps.attr(\"d\", d3.svg.line().interpolate(\"step\").x(function(d) {\n            return x(d.x);\n          }).y(function(d) {\n            return y(d.y);\n          }));\n        }\n        tailData = [lastFlap.t];\n        if (lastFlap.t + flapWidth > time) {\n          tailData.push(time);\n        } else {\n          tailData.push(lastFlap.t + flapWidth);\n          tailData.push(time);\n        }\n        tailGen = d3.svg.line().interpolate(\"step\").x(function(d) {\n          return x(d);\n        }).y(function(d) {\n          return y(lastFlapFn(d));\n        });\n        tail.datum(tailData).attr(\"d\", tailGen);\n        point.datum(time).attr(\"cx\", function(t) {\n          return x(t);\n        }).attr(\"cy\", function(t) {\n          return y(lastFlapFn(t));\n        });\n        setTimeout(step, wait);\n      };\n\n      flap = function() {\n        var currentHeight, lastFlap, lastFlapFn;\n        lastFlap = flaps[flaps.length - 1];\n        lastFlapFn = flapFn(lastFlap.t, lastFlap.h);\n        currentHeight = lastFlapFn(time);\n        flaps.push({\n          t: time,\n          h: currentHeight\n        });\n      };\n\n      margin = {\n        top: 20,\n        right: 20,\n        bottom: 30,\n        left: 40\n      };\n\n      width = 750 - margin.left - margin.right;\n\n      height = 500 - margin.top - margin.bottom;\n\n      svg = d3.select(\"body\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n      time = 0;\n\n      fps = 30;\n\n      wait = 1000 / fps;\n\n      stepWidth = 0.02;\n\n      startHeight = 0.5;\n\n      timeLeft = 0.6;\n\n      timeRight = 0.4;\n\n      x = d3.scale.linear().range([0, width]).domain([time - timeLeft, time + timeRight]);\n\n      y = d3.scale.linear().range([height, 0]).domain([0, 1]);\n\n      xAxis = d3.svg.axis().scale(x).orient(\"bottom\");\n\n      yAxis = d3.svg.axis().scale(y).orient(\"left\");\n\n      xAxisGroup = svg.append(\"g\").attr(\"class\", \"x axis\").attr(\"transform\", \"translate(0,\" + height + \")\").call(xAxis);\n\n      svg.append(\"g\").attr(\"class\", \"y axis\").call(yAxis);\n\n      flapWidth = 0.2;\n\n      flapHeight = 0.2;\n\n      flaps = [\n        {\n          t: 0,\n          h: startHeight\n        }\n      ];\n\n      tail = svg.append(\"path\").attr(\"class\", \"flappy-line\");\n\n      point = svg.append(\"circle\").attr(\"r\", \"10\").attr(\"cx\", function() {\n        return x(time);\n      }).attr(\"cy\", function() {\n        return y(startHeight);\n      });\n\n      $(document).on(\"keydown\", function() {\n        $(document).off(\"keydown\");\n        $(document).on(\"keydown\", flap);\n        step();\n      });\n\n    }).call(this);\n  });//# sourceURL=app.js");
